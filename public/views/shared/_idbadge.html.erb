<%
require 'mixed_content_parser'
if result.level
    if result.primary_type =~ /digital_object/
      level = I18n.t("enumerations.digital_object_level.#{result.level}", :default => result.level)
      badge_label = I18n.t("digital_object._public.badge_label", :level => level)
    else
      level = result.level == 'otherlevel' ? result.other_level : result.level
      badge_label = I18n.t("enumerations.archival_record_level.#{level}", :default => level)
    end
else
    badge_label = t("#{result.primary_type}._singular")
end
%>
<%
  if result.level == "series" || result.level == "recordgrp"
  refid = result.json["ref_id"]
  toc_id = result.json["component_id"]
  toc_title = result.json["display_string"]
  end
%>

<%# build URL with slugs depending on the primary type %>
<% case result.primary_type %>
  <% when "resource" %>
    <% url = resource_base_url(result) %>
  <% when "archival_object" %>
    <% url = archival_object_base_url(result) %>
  <% when "digital_object" %>
    <% url = digital_object_base_url(result) %>
  <% when "accession" %>
    <% url = accession_base_url(result) %>
  <% when "subject" %>
    <% url = subject_base_url(result) %>
  <% when "classification" %>
    <% url = classification_base_url(result) %>
  <% when "agent_person" %>
    <% url = agent_base_url(result) %>
  <% when "agent_family" %>
    <% url = agent_base_url(result) %>
  <% when "agent_corporate_entity" %>
    <% url = agent_base_url(result) %>
  <% when "agent_software" %>
    <% url = agent_base_url(result) %>
  <% else %>
    <% url = result.uri %>
<% end %>

<%= (props.fetch(:full,false)? '<h1>' : '<h3>').html_safe %>
  <% if !props.fetch(:full,false) %>
    <a href="<%= app_prefix(url) %>" class="record-title<% if props.fetch(:infinite_item, true) && !refid.blank? %> tocSeries" id="<%= refid %>" data-id="<%= toc_id %>" data-title="<%= toc_title %>"<% else %>"<% end %>>
      <%= props.fetch(:infinite_item, false) ? result.parse_full_title(true).html_safe : MixedContentParser.parse(result.display_string, '/').html_safe %>
    </a>
  <% else %>
    <%= result.display_string.html_safe %>
  <% end %>
<%= (props.fetch(:full,false)? '</h1>' : '</h3>').html_safe %>
<%# Add dates to title on record pages %>
<% if props.fetch(:full,false) && result.primary_type != 'archival_object' %>
<% unless @result.dates.blank? %>
       <% @result.dates.each do |date| %>
	       <span class="title-date"><%= inheritance(date['_inherited']).html_safe %><%= date['final_expression'] %></span>
       <% end %>
       <% end %>
       <% end %>

       <%# Part of/Found in breadcrumb from results %>
          <% if !props.fetch(:full,false) && !props.fetch(:infinite_item, false) %>
       <% if result.resolved_repository %>
      <div class="result_context">
	      <span class="found-in"><strong><%= t('context') %>: </strong></span>
        <span  class="repo_name">
          <%= link_to result.resolved_repository.fetch('name'),
                     app_prefix(repository_base_url(
                      "uri" => result.resolved_repository.fetch('uri'),
                      "slug" => result.resolved_repository.fetch('slug') {|s| nil })) %>
        </span>

        <% if result.respond_to?(:ancestors) && result.ancestors %>
          <% result.ancestors.each do |ancestor| %>
            <%= t('context_delimiter') %>
            <span class="ancestor">
            <% identifier = ancestor.has_key?('id_0') ? (0..3).collect { |i| ancestor["id_#{i}"] }.compact.join('-') : nil %>
            <% title = process_mixed_content(ancestor.fetch('title', "[#{ ancestor.fetch('level', 'untitled')}]" )).html_safe %>
            <% title_mixed = process_mixed_content(title).html_safe %>
            <%= link_to raw(identifier.blank? ? title : "#{identifier}, #{title}"), app_prefix(ancestor.fetch('uri')) %>
            </span>
          <% end %>
        <% else %>
          <% unless props.fetch(:no_res, false) || result.resolved_resource.blank? %>
            <%= t('context_delimiter') %>
            <span class="resource_name">
              <%= link_to process_mixed_content(result.resolved_resource.fetch('title')).html_safe, app_prefix(result.resolved_resource.fetch('uri')) %>
            </span>
          <% end %>
        <% end %>
      </div>
        <% end %>
<% end %>

<% unless result.resolved_top_container.blank?
  b = result.resolved_top_container
  box_uri = b['uri']
  end %>

<div class="badge-and-identifier">
<% if (result.level == "file" || result.level == "item") && !box_uri.blank? %>
<a class="box-uri" alt="View container contents" href="<%= box_uri %>">
<% end %>
  <div class="record-type-badge <%= (result.primary_type.start_with?('agent') ? 'agent' : result.primary_type) %>">
    <i class="<%= icon_for_type(result.primary_type) %>"></i>&#160;<%= badge_label %> <% if result.container_summary_for_badge %> &mdash; <%= result.container_summary_for_badge %><% end %>
  </div>
  <% if (result.level == "file" || result.level == "item") && !box_uri.blank? %>
  </a>
  <% end %>

  <% comp_id = display_component_id(result, props.fetch(:infinite_item, false)) %>
  <% unless comp_id.blank? %>
   <% unless defined?(fa_view_file) && (result.level == "file" || result.level == "item") && !box_uri.blank? %>
    <% begin
    collacc = result.resolved_resource.has_key?('id_0') ? (0..3).collect { |i| result.resolved_resource["id_#{i}"] }.compact.join('-') : nil 
    rescue 
    collacc = "NOPE"
      end %>
    <div class="identifier">
      <% unless result.resolved_resource.blank? || result.level == "collection" || collacc == comp_id || collacc == "NOPE"  %>
      <% collacc = result.resolved_resource.has_key?('id_0') ? (0..3).collect { |i| result.resolved_resource["id_#{i}"] }.compact.join('-') : nil %>
      <span class="id-label"><%= t('search_sorting.identifier') %>:</span>&#160;<span class="component"><%= collacc %></span><span class="id-label-acc">Identifier:</span>&#160;<span class="component_id"><%= comp_id %></span>
      <% else %>
      <span class="id-label"><%= t('search_sorting.identifier') %>:</span>&#160;<span class="component"><%= comp_id %></span>
      <% end %>
    </div>
    <% end %>
  <% end %>
</div>
