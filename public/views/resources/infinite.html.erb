<a name="main" title="<%= t('internal_links.main') %>"></a>

<div class="row">
  <%= render partial: 'shared/breadcrumbs' %>
</div>

<div id="main-content" class="row">
  <div class="information col-sm-7">
    <%= render partial: 'shared/idbadge', locals: {:result => @result, :props => { :full => true} } %>
  </div>
  <div class="page_actions col-sm-5 right">
    <%= render partial: 'shared/page_actions', locals: {:record => @result, :title =>  @result.display_string, :url => request.fullpath, :cite => @result.cite } %>
  </div>
</div>

<%= render partial: 'resources/resource_alltabs' %>

<%# mdc: first pass at a fix was just to remove the sidebar.  that's great,
but the layout still needs to be fixed to mimic NCSU's site, along with scrollspy magic.
need to get HM (or someone) to update this view so that it mimics
the NCSU site, with scrollspy... and also includes Duke's nice
addition of being able to access all of the Series in a UL within the scrollspy.
...tada! %> 

<script>
!function(t) {
    function e(t, e, n, o, r) {
        function i() {
            r && r(),
            l.handleHashOnLoad(),
            l.updateContextSummary()
        }
        function a() {
            o && o()
        }
        console.log('Waypoint loader called')
        this.base_url = t,
        this.wrapper = e,
        this.elt = e.find(".infinite-record-container"),
        this.contextSummaryElt = $(".infinite-record-context"),
        this.container = e.closest(".feed-container"),
        this.recordCount = n;
        var l = this;
                let config = {
        root: null,
        rootMargin: "-25% 0px -70% 0px"
      };
        this.observer = new IntersectionObserver(this.onChange, config);
        ;
      console.log(this.observer)
        this.populateWaypoints(a, i, this.observer),
        this.initKeyboardNavigation(),
        this.initEventHandlers()
    }
    var n = "scroll::";
    e.prototype.onChange = function(changes, observer) {
      var contextSummaryElt = $(".infinite-record-context");
      console.log("Changes")
      // changes.sort(function(a,b) {
      //     if( a === b) return 0;
      //     if( !a.compareDocumentPosition) {
      //         // support for IE8 and below
      //         return a.sourceIndex - b.sourceIndex;
      //     }
      //     if( a.compareDocumentPosition(b) & 2) {
      //         // b comes before a
      //         return 1;
      //     }
      //     return -1;
      // });
      console.log(changes)
       changes.forEach(change => {
      if (change.intersectionRatio > 0) {
        console.log(change.target)
        if ($(change.target).hasClass('seriesend') ) {
         //console.log('Series End')
          var previousseries = $(change.target).prevAll("[data-level='series'],[data-level='collection']")
         // console.log('previous series')
          //console.log(previousseries)
          if (previousseries) {
          var e = $(previousseries[0]).data('uri')
            if (e) {
            var n = contextSummaryElt.find('.dropdown-menu a[data-uri="' + e + '"]');
            if (n.length > 0)
                $("#scrollContext .current-record-title").html(n.html()),
                contextSummaryElt.find(".dropdown-menu a").removeAttr("aria-current"),
                n.attr("aria-current", "true"),
                $("#scrollContext").attr("title", $("#scrollContext .current-record-title").text().trim())
                return
         } 
        } }
        var e = $(change.target).data('uri')
        if (e) {
            var n = contextSummaryElt.find('.dropdown-menu a[data-uri="' + e + '"]');
            if (n.length > 0)
                $("#scrollContext .current-record-title").html(n.html()),
                contextSummaryElt.find(".dropdown-menu a").removeAttr("aria-current"),
                n.attr("aria-current", "true"),
                $("#scrollContext").attr("title", $("#scrollContext .current-record-title").text().trim())
                return
         } //else {
        //   $("#scrollContext .current-record-title").html($("#scrollContext").parent().find(".dropdown-menu a:first").html()),
        //   contextSummaryElt.find(".dropdown-menu a").removeAttr("aria-current"),
        //   contextSummaryElt.find(".dropdown-menu a:first").attr("aria-current", "true"),
        //   $("#scrollContext").attr("title", $("#scrollContext .current-record-title").text().trim())
        // }
      }
    });
    }
    e.prototype.populateWaypoints = function(t, e, z) {
        console.log('Populating waypoints')
        var n = this;
        t || (t = $.noop),
        e || (e = $.noop);
        var o = n.elt.find(".waypoint:not(.populated)");
        o.addClass("populated"),
        n.elt.attr("aria-busy", "true"),
        $(o).each(function(e, o) {
            var r = $(o).data("waypoint-number")
              , i = $(o).data("waypoint-size")
              , a = $(o).data("collection-size")
              , l = $(o).data("uris").split(";");
            $(o).addClass("loading").attr("tabindex", "0"),
            $.ajax(n.url_for("waypoints"), {
                method: "GET",
                data: {
                    urls: l,
                    number: r,
                    size: i,
                    collection_size: a
                },
                async: !0
            }).done(function(e) {
                //console.log('Pulled HTML:')
                //console.log(e)
                var htmltoinsert = ''
                Object.entries(e).forEach(function([key, value]) {
                  //console.log(`${value}`);
                  //$(o).append(value)
                  htmltoinsert = htmltoinsert + value
                });
                //console.log('Adding to element: ')
                //console.log(o)
                //console.log("HTMLtoinsert")
                //console.log(htmltoinsert)
                $(o).replaceWith(htmltoinsert);
                var seriesElts = $('.root').find("[data-level='series'],[data-level='collection'],.seriesend")
                //console.log(seriesElts)
                for (elt of seriesElts) {
                  z.observe(elt)
                  //console.log(o);
                 // console.log($(o).find("[data-level='series']"));
                }
                // var seriesEndElts = $(o).find(".seriesend")
                // for (elt of seriesEndElts) {
                //   z.observe(elt)
                  //console.log(o);
                 // console.log($(o).find("[data-level='series']"));
                //}
                //$('.root').html(htmltoinsert)
               // $(o).removeClass("loading").removeAttr("tabindex");
               // t();
                //$(o).trigger("waypointloaded");
            })
        }),
        n.elt.removeAttr("aria-busy"),
        e()
    }
    ,
    e.prototype.url_for = function(t) {
        var e = this;
        return e.base_url + "/" + t
    }
    ,
    e.prototype.getClosestElement = function(t) {
        if (t && 1 == this.elt.find(".infinite-item:focus").length)
            return this.elt.find(".infinite-item:focus").closest(".infinite-record-record");
        var e = this.elt.find(".infinite-record-record")
          , n = this.findClosestElement(e);
        return $(e.get(n))
    }
    ,
    e.prototype.getCurrentContext = function(t) {
        var e = this.getClosestElement(t)
          , n = e.data("ancestors") || [];
         // console.log(e)
         // console.log(n)
        if (1 == n.length && $.inArray(e.data("level"), ["series", "collection"]) >= 0)
            return e.data("uri");
        if (n.length > 1)
            for (var o = 0; o < n.length; o++)
                if ($.inArray(n[o].level, ["series", "collection"]) >= 0)
                    return n[o].ref;
        return null
    }
    ,
    e.prototype.updateContextSummary = function(t) {
     // console.log("Updating context summary")
        var e = this.getCurrentContext(t);
        if (e) {
            var n = this.contextSummaryElt.find('.dropdown-menu a[data-uri="' + e + '"]');
            if (n.length > 0)
                return $("#scrollContext .current-record-title").html(n.html()),
                this.contextSummaryElt.find(".dropdown-menu a").removeAttr("aria-current"),
                n.attr("aria-current", "true"),
                void $("#scrollContext").attr("title", $("#scrollContext .current-record-title").text().trim())
        }
        $("#scrollContext .current-record-title").html($("#scrollContext").parent().find(".dropdown-menu a:first").html()),
        this.contextSummaryElt.find(".dropdown-menu a").removeAttr("aria-current"),
        this.contextSummaryElt.find(".dropdown-menu a:first").attr("aria-current", "true"),
        $("#scrollContext").attr("title", $("#scrollContext .current-record-title").text().trim())
    }
    ,
    e.prototype.scrollToRecord = function(t) {
         var e = $(".waypoint").first().data("waypoint-size")
           , n = Math.floor(t / e)
           , o = function(t) {
             $("#record-number-" + t + " > .infinite-item").focus()
         };
         $($(".waypoint")[n]).is(".populated") ? $($(".waypoint")[n]).is(".loading") ? ($($(".waypoint")[n]).focus(),
         $($(".waypoint")[n]).on("waypointloaded", function() {
             o(t)
         })) : o(t) : console.warn("Cannot scrollToRecord as waypoint not populated")
    }
    ,
     e.prototype.scrollToRecordForURI = function(t) {
       var e = this;
         if (t.indexOf("/resources/") > 0)
             l = 0;
         else {
             var n = e.wrapper.find('[data-uris*="' + t + ';"], [data-uris$="' + t + '"]');
             if (0 == n.length)
                 return;
             var o = n.data("uris").split(";")
               , r = $.inArray(t, o) + 1
               , i = n.data("waypointNumber")
               , a = n.data("waypointSize")
               , l = i * a + r
         }
        smoothScroll(t)
         e.scrollToRecord(l),
         e.updateHash(t)
    }
    ,
    e.prototype.updateHash = function(t) {
        history.replaceState(null, null, document.location.pathname + "#" + n + t)
    }
    ,
    e.prototype.handleHashOnLoad = function() {
        var t = this;
        if (location.hash && location.hash.startsWith("#" + n)) {
            var e = new RegExp("^#(" + n + ")")
              , o = location.hash.replace(e, "");
            setTimeout(function() {
                t.scrollToRecordForURI(o)
            })
        }
    }
    ,
    e.prototype.initEventHandlers = function() {
        var t = this;
        t.container.on("click", ".infinite-record-context .dropdown-menu a", function() {
            $("#scrollContext").dropdown("toggle"),
            t.scrollToRecordForURI($(this).data("uri"))
         }),
         t.container.on("focus", ".infinite-item", function() {
             var e = $(this);
             setTimeout(function() {
                 t.updateHash(e.data("uri")),
                 t.updateContextSummary(!0)
             })
         }),
        $(window).on("scroll", function() {
            window.scrollY > t.elt.offset().top ? (t.contextSummaryElt.addClass("fixed"),
            t.contextSummaryElt.find(".infinite-record-context-selector").css("width", t.elt.width() + "px").css("margin-left", t.elt.offset().left + "px"),
            t.contextSummaryElt.find(".infinite-record-context-resource").css("padding-left", t.elt.offset().left + "px")) : t.contextSummaryElt.removeClass("fixed").find(".infinite-record-context-selector").css("width", "auto").css("margin-left", 0)
           t.updateContextSummary()
        })
    }
    ,
    e.prototype.initKeyboardNavigation = function() {
        var t = this;
        t.elt.on("keydown", ".infinite-record-record", function(e) {
            var n = $(this).closest(".infinite-record-record")
              , o = n.find(" > .infinite-item").data("recordnumber")
              , r = 0
              , i = n.find(" > .infinite-item").data("collectionsize") - 1;
            if (34 == e.keyCode)
                o = Math.min(o + 1, i);
            else if (33 == e.keyCode)
                n.prev() && (o = Math.max(o - 1, r));
            else if (e.ctrlKey && 35 == e.keyCode)
                o = i;
            else {
                if (!e.ctrlKey || 36 != e.keyCode)
                    return !0;
                o = r
            }
            return e.preventDefault(),
            t.scrollToRecord(o),
            !1
        })
    }
    ,
    e.prototype.findClosestElement = function(t) {
        if (t.length <= 1)
            return 0;
        var e = (window.scrollY,
        t.first().offset().top,
        0)
          , n = t.length - 1
          , o = function(t) {
            return t.getBoundingClientRect().top
        };
        if (o(t[e]) <= 0 && o(t[n]) <= 0)
            return n;
        for (; e + 1 < n && o(t[e]) < 0 && o(t[n]) > 0; ) {
            var r = Math.floor((n - e) / 2) + e
              , i = t[r]
              , a = o(i);
            a > 0 ? n = r : a <= 0 && (e = r)
        }
        return Math.abs(o(t[e])) < Math.abs(o(t[n])) ? e : n
    }
    ,
    t.WaypointLoader = e
}(window);
</script>

	<script src="/assets/javascripts/bootstrap-dropdown.js"/>
	<script>
		$('.dropdown-toggle').dropdown()
	</script>

<div class="row feed-container" id="tabs">
  <div class="infinite-record-wrapper col-sm-9 col-md-9 col-lg-6" id="center-page">

<nav class="infinite-record-context">
      <div class="infinite-record-context-affix">
        <a href="#main-content" aria-hidden="true" class="infinite-record-context-resource" style="padding-left: 45px;">
          <span class="infinite-record-context-resource-back-to-top">
            <i aria-hidden="true" class="fa fa-chevron-up"></i> <span>Return to top</span>
          </span>
          <span class="infinite-record-context-resource-title">
	  	<h1><%= @result.display_string %></h1> Identifier: <%= @result.identifier %>
          </span>
        </a>
      </div>
    </nav>


      <div class="infinite-record-container">
          <div class="root">
              <% waypoint_size = 100 %>
              <% @ordered_records.each_slice(waypoint_size).each_with_index do |refs, i| %>
                  <div class="waypoint" data-waypoint-number="<%= i %>" data-waypoint-size=<%= waypoint_size %> data-uris="<%= refs.map {|r| r['ref']}.join(';') %>">
                  <%refs.each do |record|%>
                  <div class="recordplaceholder" id="<%= record["ref"]%>"></div>
                  <%end%>
                  </div>
              <% end %>
          </div>

          </div>
      </div>
      <div class="loader col-sm-offset-3 col-xs-offset-3"><span>Loading. Please Wait...</span></div>

<script>
function smoothScroll(id) {
    //console.log('#' + String(id))
      $('html, body').animate({
        scrollTop: $(document.getElementById(id)).offset().top - 155
    }, 200);
}
</script>
<script>

 //var syncer = new TreeSync('<%= params[:rid]%>');
 //window.syncer = syncer;

//  var scroll = new InfiniteScroll('<%= url_for(:action => :show) %>/infinite',
//                                  $('.infinite-record-wrapper'),
//                                  <%= @ordered_records.length %>,
//                                  function() {
//                                      syncer.infiniteScrollIsReady(scroll);
//                                  });

//  /* NOTE: This just here for debugging... */
//  window.scroller = scroll;
</script> 
<script>
async function createWaypointLoader() {
  var loader = new WaypointLoader('<%= url_for(:action => :show) %>/infinite',
                                  $('.infinite-record-wrapper'),
                                  <%= @ordered_records.length %>,
                                  function() {
                                  });
  
  console.log('Added waypoint loader')
  /* NOTE: This just here for debugging... */
  window.loader = loader;
}

// async function createLargeTree() {
//             var tree = new LargeTreeBrown(new TreeDataSource('<%= url_for(:action => :show) %>/tree'),
//                           $('.infinite-tree-view'),
//                           '<%= @root_uri %>',
//                           true,
//                           new SimpleRenderer(),
//                           function() {
//                           },
//                           function(current_node, tree) {
//                             tree.expandNode(current_node);
//                           });
// window.tree = tree;
// }

createWaypointLoader()
//createLargeTree()
</script>





<script>
  // handle clicks on tree items
  $('.infinite-record-wrapper').on('click', '.infinite-record-record a.record-title', function(event) {
      // update the hash so browser-back returns user to the record they clicked
      var $record = $(this).closest('.infinite-record-record');
      var uri = $record.data('uri');
      var tree_id = TreeIds.uri_to_tree_id(uri);
      location.hash = '#tree::'+tree_id;

      return true;
  });
</script>



<%= render partial: 'shared/modal_actions' %>
